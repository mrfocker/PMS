��ʾ��
@Override
	@ResponseBody
	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse arg1) throws Exception {
		// TODO Auto-generated method stub
		String userId = request.getParameter("userId");
		String userPwd = request.getParameter("userPwd");
		int userTypes = Integer.parseInt(request.getParameter("userType"));
		Map<String, Object> model = new HashMap<String, Object>();
		
		System.out.println("-------------------------------------->Controller");
		System.out.println("-------------------------------------->LoginController");
		switch (userTypes) {
			case ADMIN:
				Administrator administrator = new Administrator();
				administrator.setSu_id(Float.parseFloat(userId));
				administrator.setSu_password(userPwd);
				
				if (loginService.selectadminlogin(administrator) != null) {
					result = loginService.selectadminlogin(administrator);
					log.debug("logintest================>"+result);
					
					if (0 ==result) {
						administrator.setSu_isonline(true);
						loginService.updateAdminStatus(administrator);
						model.put("success", "success");
						return new ModelAndView("/test", model);
					} else {
						model.put("error", "当前用户已登录");
						return new ModelAndView("/index", model);
					}
					
				} else {
					model.put("error", "用户名或密码错误");
					return new ModelAndView("/index", model);
				}
				
		case TEACHER:
				Teacher teacher = new Teacher();
				teacher.setTeacher_id(userId);
				teacher.setTeacher_password(userPwd);
				
				if (loginService.selectteacherlogin(teacher) != null) {
					result = loginService.selectteacherlogin(teacher);
					log.debug("logintest================>"+result);
					
					if (0 ==result) {
						teacher.setTeacher_isonline(true);
						loginService.updateTeacherStatus(teacher);
						model.put("success", "success");
						return new ModelAndView("/test", model);
					} else {
						model.put("error", "当前用户已登录");
						return new ModelAndView("/index", model);
					}
					
				} else {
					model.put("error", "用户名或密码错误");
					return new ModelAndView("/index", model);
				}
				
			case STUDENT:
				Student student = new Student();
				student.setStu_id(userId);
				student.setStu_password(userPwd);
				
				if (loginService.selectstudentlogin(student) != null) {
					result = loginService.selectstudentlogin(student);
					log.debug("logintest================>"+result);
					
					if (0 ==result) {
						student.setStu_isonline(true);
						loginService.updateStudentStatus(student);
						model.put("success", "success");
						return new ModelAndView("/test", model);
					} else {
						model.put("error", "当前用户已登录");
						return new ModelAndView("/index", model);
					}
					
				} else {
					model.put("error", "用户名或密码错误");
					return new ModelAndView("/index", model);
				}
	
			default:
				break;
		}
		return null;
	}
	
DownloadController.java
		@RequestMapping(value = "/downloadSingleAdmin.action", method = { RequestMethod.POST, RequestMethod.GET })
	public ModelAndView downloadSingleAdmin(@RequestParam("name") String paperName, @RequestParam("id") String stuId,
			HttpServletResponse response) {

		// 目标文件名
		String fileName = FilePath + paperName;
		// 获取输入流
		InputStream bis;
		try {
			bis = new BufferedInputStream(new FileInputStream(new File(fileName)));
			// 假如以中文名下载的话
			String filename = stuId + "_Paper.docx";
			// 转码，免得文件名中文乱码
			filename = URLEncoder.encode(filename, "UTF-8");
			// 设置文件下载头
			response.addHeader("Content-Disposition", "attachment;filename=" + filename);
			// 1.设置文件ContentType类型，这样设置，会自动判断下载文件类型
			response.setContentType("multipart/form-data");

			BufferedOutputStream out = new BufferedOutputStream(response.getOutputStream());
			int len = 0;
			while ((len = bis.read()) != -1) {
				out.write(len);
				out.flush();
			}
			out.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// modelAndView.setViewName("/index");
		// return modelAndView;
		return null;
	}
	
	// 师生单个
	@RequestMapping(value = "/downloadSingle.action", method = { RequestMethod.POST, RequestMethod.GET })
	public ModelAndView downloadSingle(Paper paper, HttpServletResponse response) {

		// ModelAndView modelAndView = new ModelAndView();
		Paper paperTemp = downloadService.downloadSingle(paper);
		// 目标文件名
		String fileName = FilePath + paperTemp.getPaper_name();
		// 获取输入流
		InputStream bis;
		try {
			bis = new BufferedInputStream(new FileInputStream(new File(fileName)));
			// 假如以中文名下载的话
			String filename = paperTemp.getPaper_stuId() + "_论文.docx";
			// 转码，免得文件名中文乱码
			filename = URLEncoder.encode(filename, "UTF-8");
			// 设置文件下载头
			response.addHeader("Content-Disposition", "attachment;filename=" + filename);
			// 1.设置文件ContentType类型，这样设置，会自动判断下载文件类型
			response.setContentType("multipart/form-data");
			BufferedOutputStream out = new BufferedOutputStream(response.getOutputStream());
			int len = 0;
			while ((len = bis.read()) != -1) {
				out.write(len);
				out.flush();
			}
			out.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// modelAndView.setViewName("/index");
		// return modelAndView;
		return null;
	}
	
	/* $.ajaxSetup({  
				        contentType : 'application/json;charset=utf-8'  
				    });  */
					/* $.post("${pageContext.request.contextPath }/pages/downloadMulti.action", JSON.stringify(result), function(file) {
						if ("error" != file) {
							
						} else {

						}
					}); */
					/* $.ajax({
						url : "${pageContext.request.contextPath }/pages/downloadMulti.action",
						type: "post",
						contentType:"application/json;charset=utf-8",
						data: JSON.stringify(result),
						dataType : "multipart/form-data",
						async: true,
						success : function(data, textStatus, request) {
							 alert(request.getResponseHeader('some_header')); 
							alert(data);
						}
					}); */